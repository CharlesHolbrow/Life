// Generated by CoffeeScript 1.6.2
(function() {
  var _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.Board = (function(_super) {
    __extends(Board, _super);

    function Board() {
      _ref = Board.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Board.prototype.initialize = function(n) {
      var ary, x, y;

      if (n == null) {
        n = 40;
      }
      this.set('n', n);
      this.set('aliveCells', 0);
      ary = (function() {
        var _i, _results;

        _results = [];
        for (y = _i = 0; 0 <= n ? _i < n : _i > n; y = 0 <= n ? ++_i : --_i) {
          _results.push((function() {
            var _j, _results1;

            _results1 = [];
            for (x = _j = 0; 0 <= n ? _j < n : _j > n; x = 0 <= n ? ++_j : --_j) {
              _results1.push(new Cell({
                n: n,
                x: x,
                y: y
              }));
            }
            return _results1;
          })());
        }
        return _results;
      })();
      return this.set('cells', ary);
    };

    Board.prototype.getCellState = function(x, y) {
      var cell, n;

      n = this.get('n');
      if ((x >= n) || (x < 0)) {
        return null;
      }
      if ((y >= n) || (y < 0)) {
        return null;
      }
      cell = this.get('cells')[y][x];
      if (cell.get('alive')) {
        return 1;
      } else {
        return 0;
      }
    };

    Board.prototype.checkHoriz = function(x, y) {
      return this.getCellState(x + 1, y) + this.getCellState(x - 1, y);
    };

    Board.prototype.checkVert = function(x, y) {
      return this.getCellState(x, y + 1) + this.getCellState(x, y - 1);
    };

    Board.prototype.checkDiag = function(x, y) {
      return this.getCellState(x + 1, y + 1) + this.getCellState(x - 1, y - 1) + this.getCellState(x + 1, y - 1) + this.getCellState(x - 1, y + 1);
    };

    Board.prototype.checkNeighbors = function(x, y) {
      return this.checkHoriz(x, y) + this.checkVert(x, y) + this.checkDiag(x, y);
    };

    Board.prototype.cellWillLive = function(x, y) {
      var count;

      count = this.checkNeighbors(x, y);
      if (this.getCellState(x, y)) {
        return count === 2 || count === 3;
      } else {
        return count === 3;
      }
    };

    Board.prototype.step = function() {
      var aliveCells, cell, cells, row, setWillLive, x, y, _i, _j, _k, _l, _len, _len1, _len2, _len3,
        _this = this;

      cells = this.get('cells');
      aliveCells = 0;
      setWillLive = function(cell, x, y) {
        cell.set('willLive', _this.cellWillLive(x, y));
        if (cell.get('willLive')) {
          return aliveCells++;
        }
      };
      for (y = _i = 0, _len = cells.length; _i < _len; y = ++_i) {
        row = cells[y];
        for (x = _j = 0, _len1 = row.length; _j < _len1; x = ++_j) {
          cell = row[x];
          setWillLive(cell, x, y);
        }
      }
      for (_k = 0, _len2 = cells.length; _k < _len2; _k++) {
        row = cells[_k];
        for (_l = 0, _len3 = row.length; _l < _len3; _l++) {
          cell = row[_l];
          cell.set('alive', cell.get('willLive'));
        }
      }
      if (!aliveCells) {
        this.trigger('stop');
      }
      return this.set('aliveCells', aliveCells);
    };

    return Board;

  })(Backbone.Model);

}).call(this);

/*
//@ sourceMappingURL=board.map
*/
